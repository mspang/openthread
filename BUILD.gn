#  Copyright (c) 2020, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

import("etc/gn/openthread.gni")

config("openthread_config") {
  defines = []

  if (openthread_config_backbone_router_enable) {
    defines += [ "OPENTHREAD_CONFIG_BACKBONE_ROUTER_ENABLE=1" ]
  }

  if (openthread_config_border_agent_enable) {
    defines += [ "OPENTHREAD_CONFIG_BORDER_AGENT_ENABLE=1" ]
  }

  if (openthread_config_border_router_enable) {
    defines += [ "OPENTHREAD_CONFIG_BORDER_ROUTER_ENABLE=1" ]
  }

  if (openthread_config_enable_builtin_mbedtls_management) {
    defines += [ "OPENTHREAD_CONFIG_ENABLE_BUILTIN_MBEDTLS_MANAGEMENT=1" ]
  } else {
    defines += [ "OPENTHREAD_CONFIG_ENABLE_BUILTIN_MBEDTLS_MANAGEMENT=0" ]
  }

  if (openthread_config_channel_manager_enable) {
    defines += [ "OPENTHREAD_CONFIG_CHANNEL_MANAGER_ENABLE=1" ]
  }

  if (openthread_config_channel_monitor_enable) {
    defines += [ "OPENTHREAD_CONFIG_CHANNEL_MONITOR_ENABLE=1" ]
  }

  if (openthread_config_child_supervision_enable) {
    defines += [ "OPENTHREAD_CONFIG_CHILD_SUPERVISION_ENABLE=1" ]
  }

  if (openthread_config_coap_api_enable) {
    defines += [ "OPENTHREAD_CONFIG_COAP_API_ENABLE=1" ]
  }

  if (openthread_config_coap_secure_api_enable) {
    defines += [ "OPENTHREAD_CONFIG_COAP_SECURE_API_ENABLE=1" ]
  }

  if (openthread_config_coap_observe_api_enable) {
    defines += [ "OPENTHREAD_CONFIG_COAP_OBSERVE_API_ENABLE=1" ]
  }

  if (openthread_config_commissioner_enable) {
    defines += [ "OPENTHREAD_CONFIG_COMMISSIONER_ENABLE=1" ]
  }

  if (openthread_config_mac_csl_receiver_enable) {
    defines += [ "OPENTHREAD_CONFIG_MAC_CSL_RECEIVER_ENABLE=1" ]
  }

  if (openthread_config_dhcp6_client_enable) {
    defines += [ "OPENTHREAD_CONFIG_DHCP6_CLIENT_ENABLE=1" ]
  }

  if (openthread_config_dhcp6_server_enable) {
    defines += [ "OPENTHREAD_CONFIG_DHCP6_SERVER_ENABLE=1" ]
  }

  if (openthread_config_diag_enable) {
    defines += [ "OPENTHREAD_CONFIG_DIAG_ENABLE=1" ]
  }

  if (openthread_config_dns_client_enable) {
    defines += [ "OPENTHREAD_CONFIG_DNS_CLIENT_ENABLE=1" ]
  }

  if (openthread_config_ecdsa_enable) {
    defines += [ "OPENTHREAD_CONFIG_ECDSA_ENABLE=1" ]
  }

  if (openthread_config_dua_enable) {
    defines += [ "OPENTHREAD_CONFIG_DUA_ENABLE=1" ]
  }

  if (openthread_config_mlr_enable) {
    defines += [ "OPENTHREAD_CONFIG_MLR_ENABLE=1" ]
  }

  if (openthread_config_heap_external_enable) {
    defines += [ "OPENTHREAD_CONFIG_HEAP_EXTERNAL_ENABLE=1" ]
  }

  if (openthread_config_ip6_fragmentation_enable) {
    defines += [ "OPENTHREAD_CONFIG_IP6_FRAGMENTATION_ENABLE=1" ]
  }

  if (openthread_config_jam_detection_enable) {
    defines += [ "OPENTHREAD_CONFIG_JAM_DETECTION_ENABLE=1" ]
  }

  if (openthread_config_joiner_enable) {
    defines += [ "OPENTHREAD_CONFIG_JOINER_ENABLE=1" ]
  }

  if (openthread_config_legacy_enable) {
    defines += [ "OPENTHREAD_CONFIG_LEGACY_ENABLE=1" ]
  }

  if (openthread_config_link_raw_enable) {
    defines += [ "OPENTHREAD_CONFIG_LINK_RAW_ENABLE=1" ]
  }

  if (openthread_config_log_level_dynamic_enable) {
    defines += [ "OPENTHREAD_CONFIG_LOG_LEVEL_DYNAMIC_ENABLE=1" ]
  }

  if (openthread_config_mac_filter_enable) {
    defines += [ "OPENTHREAD_CONFIG_MAC_FILTER_ENABLE=1" ]
  }

  if (openthread_config_mle_long_routes_enable) {
    defines += [ "OPENTHREAD_CONFIG_MLE_LONG_ROUTES_ENABLE=1" ]
  }

  if (openthread_config_tmf_network_diag_mtd_enable) {
    defines += [ "OPENTHREAD_CONFIG_TMF_NETWORK_DIAG_MTD_ENABLE=1" ]
  }

  if (openthread_config_multiple_instance_enable) {
    defines += [ "OPENTHREAD_CONFIG_MULTIPLE_INSTANCE_ENABLE=1" ]
  }

  if (openthread_config_platform_netif_enable) {
    defines += [ "OPENTHREAD_CONFIG_PLATFORM_NETIF_ENABLE=1" ]
  }

  if (openthread_config_platform_udp_enable) {
    defines += [ "OPENTHREAD_CONFIG_PLATFORM_UDP_ENABLE=1" ]
  }

  if (openthread_config_reference_device_enable) {
    defines += [ "OPENTHREAD_CONFIG_REFERENCE_DEVICE_ENABLE=1" ]
  }

  if (openthread_config_tmf_netdata_service_enable) {
    defines += [ "OPENTHREAD_CONFIG_TMF_NETDATA_SERVICE_ENABLE=1" ]
  }

  if (openthread_settings_ram) {
    defines += [ "OPENTHREAD_SETTINGS_RAM=1" ]
  }

  if (openthread_config_ip6_slaac_enable) {
    defines += [ "OPENTHREAD_CONFIG_IP6_SLAAC_ENABLE=1" ]
  }

  if (openthread_config_sntp_client_enable) {
    defines += [ "OPENTHREAD_CONFIG_SNTP_CLIENT_ENABLE=1" ]
  }

  if (openthread_config_time_sync_enable) {
    defines += [ "OPENTHREAD_CONFIG_TIME_SYNC_ENABLE=1" ]
  }

  if (openthread_config_udp_forward_enable) {
    defines += [ "OPENTHREAD_CONFIG_UDP_FORWARD_ENABLE=1" ]
  }

  if (openthread_config_full_logs) {
    defines += [
      "OPENTHREAD_CONFIG_LOG_LEVEL=OT_LOG_LEVEL_DEBG",
      "OPENTHREAD_CONFIG_LOG_API=1",
      "OPENTHREAD_CONFIG_LOG_ARP=1",
      "OPENTHREAD_CONFIG_LOG_BBR=1",
      "OPENTHREAD_CONFIG_LOG_CLI=1",
      "OPENTHREAD_CONFIG_LOG_COAP=1",
      "OPENTHREAD_CONFIG_LOG_DUA=1",
      "OPENTHREAD_CONFIG_LOG_ICMP=1",
      "OPENTHREAD_CONFIG_LOG_IP6=1",
      "OPENTHREAD_CONFIG_LOG_MAC=1",
      "OPENTHREAD_CONFIG_LOG_MEM=1",
      "OPENTHREAD_CONFIG_LOG_MESHCOP=1",
      "OPENTHREAD_CONFIG_LOG_MLE=1",
      "OPENTHREAD_CONFIG_LOG_MLR=1",
      "OPENTHREAD_CONFIG_LOG_NETDATA=1",
      "OPENTHREAD_CONFIG_LOG_NETDIAG=1",
      "OPENTHREAD_CONFIG_LOG_PKT_DUMP=1",
      "OPENTHREAD_CONFIG_LOG_PLATFORM=1",
      "OPENTHREAD_CONFIG_LOG_PREPEND_LEVEL=1",
      "OPENTHREAD_CONFIG_LOG_PREPEND_REGION=1",
    ]
  }

  if (openthread_config_otns_enable) {
    defines += [ "OPENTHREAD_CONFIG_OTNS_ENABLE=1" ]
  }

  if (openthread_config_file != "") {
    defines += [ "OPENTHREAD_CONFIG_FILE=${openthread_config_file}" ]
  }

  include_dirs = openthread_project_include_dirs

  include_dirs += [ "include" ]

  cflags_cc = [ "-Wno-non-virtual-dtor" ]
}

config("openthread_ftd_config") {
  defines = [ "OPENTHREAD_FTD=1" ]
}

config("openthread_mtd_config") {
  defines = [ "OPENTHREAD_MTD=1" ]
}

config("openthread_radio_config") {
  defines = [ "OPENTHREAD_RADIO=1" ]
}

group("libopenthread-ftd") {
  public_deps = [ "include/openthread:core-api" ]
  deps = [ "src/core:libopenthread-ftd" ]
}

group("libopenthread-mtd") {
  public_deps = [ "include/openthread:core-api" ]
  deps = [ "src/core:libopenthread-mtd" ]
}

group("libopenthread-radio") {
  public_deps = [ "include/openthread:core-api" ]
  deps = [ "src/core:libopenthread-radio" ]
}

group("libopenthread-cli-ftd") {
  public_deps = [ "include/openthread:cli-api" ]
  deps = [ "src/cli:libopenthread-cli-ftd" ]
}

group("libopenthread-cli-mtd") {
  public_deps = [ "include/openthread:cli-api" ]
  deps = [ "src/cli:libopenthread-cli-mtd" ]
}
